const e=require("pino"),t=require("numeral"),r=e({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-yy-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")});function n(e,n,l){let o=e*(l-n)/n;o=Number.parseInt(o);let $=o%1e3;o=Number.parseInt(o/1e3);let a=o%60;o=Number.parseInt(o/60);let i=o%60,s=Number.parseInt(o/60);return r.info(`计算预计时间：elapsed=${e}, finished=${n}, total=${l}; 计算结果：time=${o}, ms=${$}, sec=${a}, min=${i}, hour=${s}`),`${t(s).format("00")}:${t(i).format("00")}:${t(a).format("00")}.${t($).format("000")}`}export default function(e,t=20,l="默认任务队列"){let o=[],$=0,a=[],i=Date.now(),s=0;for(let u=0;u<t;u++)o[u]=new Promise(async(t,o)=>{try{for(;e&&$<e.length;){let t=$,o=e[t].args;$++,r.debug(`【${l}】${u} - 执行第${$}个任务，参数【%o】`,o);try{a[t]=await e[t].caller(...o)}catch(e){r.error(`【${l}】${u} - 执行错误，%o`,e)}s++;let f=n(Date.now()-i,s,e.length);r.debug(`【${l}】${u} - 完成第${t+1}个任务！`),r.info(`【${l}】 已经完成${s}/${e.length}个任务，预计还需要时间：${f}`)}t()}catch(e){o(e)}});return o}
