{"version":3,"file":"taskqueue.js","sources":["src/task-queue.js"],"sourcesContent":["const pino = require(\"pino\");\nconst numeral = require(\"numeral\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-yy-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\n/**\n * 使用一个最大并行maxWorker数量的方式执行任务，任务采用[ {caller, args } ]方式传入\n * @param {Array} tasks 传入的任务信息，对象数组，对象格式为 {caller, args}，其中caller为async异步方法，args为方法使用的参数\n * @param {Number} maxWorker 执行队列的最大并发数，默认20\n * @param {string} name 执行队列名称，用于日志和内部识别显示\n * @returns {Array<Promise>} 返回并发执行的Promise函数数组，可以用于外部等待结果\n */\nfunction executeTasks(tasks, maxWorker = 20, name = \"默认任务队列\") {\n    // 工作线程\n    let workers = [];\n    // 当前已经执行的任务数（不等于完成的任务数，等于已经完成+正在执行）\n    let taskCount = 0;\n    // 返回结果\n    let results = [];\n\n    let startTime = Date.now();\n    let finished = 0;\n\n    for (let i = 0; i < maxWorker; i++) {\n        workers[i] = new Promise(async (resolve, reject) => {\n            try {\n                while (tasks && taskCount < tasks.length) {\n                    let index = taskCount;\n                    let taskArgs = tasks[index].args;\n                    taskCount++;\n                    logger.debug(\n                        `【${name}】${i} - 执行第${taskCount}个任务，参数【%o】`,\n                        taskArgs\n                    );\n                    try {\n                        results[index] = await tasks[index].caller(...taskArgs);\n                    } catch (error) {\n                        logger.error(`【${name}】${i} - 执行错误，%o`, error);\n                    }\n                    finished++;\n                    let elapsed = Date.now() - startTime;\n                    let est = calculateEstimateTime(\n                        elapsed,\n                        finished,\n                        tasks.length\n                    );\n                    logger.debug(\n                        `【${name}】${i} - 完成第${index + 1}个任务！`\n                    );\n                    logger.info(\n                        `【${name}】 已经完成${finished}/${tasks.length}个任务，预计还需要时间：${est}`\n                    );\n                }\n\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    return workers;\n}\n\nfunction calculateEstimateTime(elapsed, finished, total) {\n    let time = (elapsed * (total - finished)) / finished;\n\n    time = Number.parseInt(time);\n    let ms = time % 1000;\n\n    time = Number.parseInt(time / 1000);\n    let sec = time % 60;\n\n    time = Number.parseInt(time / 60);\n    let min = time % 60;\n\n    let hour = Number.parseInt(time / 60);\n    logger.info(\n        `计算预计时间：elapsed=${elapsed}, finished=${finished}, total=${total}; 计算结果：time=${time}, ms=${ms}, sec=${sec}, min=${min}, hour=${hour}`\n    );\n    return `${numeral(hour).format(\"00\")}:${numeral(min).format(\n        \"00\"\n    )}:${numeral(sec).format(\"00\")}.${numeral(ms).format(\"000\")}`;\n}\n\nexport default executeTasks;\n"],"names":["pino","require","numeral","logger","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","calculateEstimateTime","elapsed","finished","total","time","Number","parseInt","ms","sec","min","hour","info","format","tasks","maxWorker","name","workers","taskCount","results","startTime","Date","now","i","Promise","async","resolve","reject","length","index","taskArgs","args","debug","caller","error","est"],"mappings":"2MAAA,MAAMA,EAAOC,QAAQ,QACfC,EAAUD,QAAQ,WAElBE,EAASH,EAAK,CAChBI,MAAOC,QAAQC,IAAIC,QAAU,OAC7BC,YAAa,CACTC,YAAY,EACZC,cAAe,4BACfC,MAAM,GAEVC,WAAYX,QAAQ,iBA8DxB,SAASY,EAAsBC,EAASC,EAAUC,OAC1CC,EAAQH,GAAWE,EAAQD,GAAaA,EAE5CE,EAAOC,OAAOC,SAASF,OACnBG,EAAKH,EAAO,IAEhBA,EAAOC,OAAOC,SAASF,EAAO,SAC1BI,EAAMJ,EAAO,GAEjBA,EAAOC,OAAOC,SAASF,EAAO,QAC1BK,EAAML,EAAO,GAEbM,EAAOL,OAAOC,SAASF,EAAO,WAClCd,EAAOqB,KACF,kBAAiBV,eAAqBC,YAAmBC,gBAAoBC,SAAYG,UAAWC,UAAYC,WAAaC,KAE1H,GAAErB,EAAQqB,GAAME,OAAO,SAASvB,EAAQoB,GAAKG,OACjD,SACCvB,EAAQmB,GAAKI,OAAO,SAASvB,EAAQkB,GAAIK,OAAO,gBAtEzD,SAAsBC,EAAOC,EAAY,GAAIC,EAAO,cAE5CC,EAAU,GAEVC,EAAY,EAEZC,EAAU,GAEVC,EAAYC,KAAKC,MACjBnB,EAAW,MAEV,IAAIoB,EAAI,EAAGA,EAAIR,EAAWQ,IAC3BN,EAAQM,GAAK,IAAIC,QAAQC,MAAOC,EAASC,cAE1Bb,GAASI,EAAYJ,EAAMc,QAAQ,KAClCC,EAAQX,EACRY,EAAWhB,EAAMe,GAAOE,KAC5Bb,IACA3B,EAAOyC,MACF,IAAGhB,KAAQO,UAAUL,cACtBY,OAGAX,EAAQU,SAAef,EAAMe,GAAOI,UAAUH,GAChD,MAAOI,GACL3C,EAAO2C,MAAO,IAAGlB,KAAQO,cAAeW,GAE5C/B,QAEIgC,EAAMlC,EADIoB,KAAKC,MAAQF,EAGvBjB,EACAW,EAAMc,QAEVrC,EAAOyC,MACF,IAAGhB,KAAQO,UAAUM,EAAQ,SAElCtC,EAAOqB,KACF,IAAGI,UAAab,KAAYW,EAAMc,qBAAqBO,KAIhET,IACF,MAAOQ,GACLP,EAAOO,aAKZjB"}